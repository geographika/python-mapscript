name: Build Python MapScript Wheels

on: [push]
env:
  SDK: release-1928-x64
  VS_VER: "Visual Studio 16 2019"
  VC_VARS: "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
  
  #SDK: "release-1930-x64"
  #VS_VER: "Visual Studio 17 2022"
  #VC_VARS: "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
  
  SWIG_VER: "4.1.0" # "4.0.2"

jobs:
  build:

    #runs-on: windows-2022 # includes VS 2022
    runs-on: windows-2019 # includes VS 2019
    strategy:
      fail-fast: true # default is true, set to false to see which builds run
      matrix:
        python-version: [2.7, 3.7, 3.8, 3.9, "3.10"] # 3.6 "3.10" needs to be in quotes and is currently failing 10 tests


    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Get MapServer sourcecode
        shell: powershell
        run: |
          # md D:\MapServer\VS2022
          # cd D:\MapServer\VS2022
          #git clone https://github.com/geographika/mapserver.git --branch main --single-branch mapserver
          #git clone https://github.com/mapserver/mapserver.git --branch branch-8-0 --single-branch mapserver
          git clone https://github.com/mapserver/mapserver.git --branch main --single-branch mapserver
          
      - name: Download and unzip SDK
        shell: powershell
        # http://download.gisinternals.com/sdk/downloads/release-1930-x64-dev.zip
        run: |
          $SDK="${{ env.SDK }}"
          # $SDK="release-1930-x64"
          $SDK_ZIP="$SDK-dev.zip"
          $SDK_URL="http://download.gisinternals.com/sdk/downloads/$SDK_ZIP"
          $ProgressPreference = 'SilentlyContinue' # remove console output and greatly speeds-up downloading and unzipping
          Invoke-WebRequest -Uri $SDK_URL -OutFile $SDK_ZIP
          Expand-Archive $SDK_ZIP -DestinationPath sdk
          $SWIG_VER="${{ env.SWIG_VER }}"
          $SWIG_ZIP="swigwin-${{ env.SWIG_VER }}.zip"
          Expand-Archive $SWIG_ZIP -DestinationPath "sdk"

      - name: Configure MapServer
        shell: powershell
        run: |
          # https://stackoverflow.com/questions/2124753/how-can-i-use-powershell-with-the-visual-studio-command-prompt
          
          # remote
          $VCVARS = "${{ env.VC_VARS }}"
          # local
          #$VCVARS = "C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat"

          cmd.exe /c "call `"$VCVARS`" && set > %temp%\vcvars.txt"
          Get-Content "$env:temp\vcvars.txt" | Foreach-Object {
            if ($_ -match "^(.*?)=(.*)$") {
                Set-Content "env:\$($matches[1])" $matches[2]
            }
          }

          # dir env:
          
          # following lines for local testing
          #cd D:\MapServer\VS2022
          #$env:PATH="D:/Tools/cmake-3.22.3-windows-x86_64/bin;" + $env:PATH
          #$VS_VER="Visual Studio 17 2022"
          #$PYTHON_ROOT_DIR="C:/Python310"
          #$SDK="release-1930-x64"
          #$SWIG_VER="4.1.0"

          # as above for GHA
          $SDK="${{ env.SDK }}"
          $VS_VER="${{ env.VS_VER }}"
          $PYTHON_ROOT_DIR="${{ env.pythonLocation }}" -replace "\\","/"
          $SWIG_VER="${{ env.SWIG_VER }}"


          # following commands for both local and GHA
          $ROOT_FOLDER = (Get-Location).ToString() -replace "\\","/"
          $SDK_PREFIX="$ROOT_FOLDER/sdk/$SDK"
          $SDK_INC="$SDK_PREFIX/include"
          $SDK_LIB="$SDK_PREFIX/lib"
          $SDK_BIN="$SDK_PREFIX/bin"
          $SWIG_EXECUTABLE="$ROOT_FOLDER/sdk/swigwin-$SWIG_VER/swig.exe"
          $REGEX_DIR="$ROOT_FOLDER/sdk/support/regex-0.12"
          $PYTHON_EXECUTABLE="$PYTHON_ROOT_DIR/python.exe"
          mkdir build
          cd build
          $env:PATH="$ROOT_FOLDER/build/Release;$SDK_BIN;" + $env:PATH
          # TODO is the following used?
          $PROJECT_BINARY_DIR="$ROOT_FOLDER/build"
          $SWIG_PYTHON_INTERPRETER_NO_DEBUG=1

          $PYMAPSCRIPT_ANNOTATIONS=1
          
          # following only for GHA
          if ("${{ matrix.python-version }}" -eq "2.7")
          {
            $PYMAPSCRIPT_ANNOTATIONS=0
          }

          cmake -G "$VS_VER" -A "x64" "$ROOT_FOLDER/mapserver" `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH="$SDK_PREFIX" `
          -DPNG_LIBRARY="$SDK_LIB/libpng16_static.lib" `
          -DHARFBUZZ_INCLUDE_DIR="$SDK_INC/harfbuzz" `
          -DICONV_DLL="$SDK_BIN/iconv.dll" `
          -DFRIBIDI_INCLUDE_DIR="$SDK_INC/fribidi" `
          -DMS_EXTERNAL_LIBS="$SDK_LIB/harfbuzz.lib;$SDK_LIB/uriparser.lib" `
          -DSVG_LIBRARY="$SDK_LIB/libsvg.lib" `
          -DSVGCAIRO_LIBRARY="$SDK_LIB/libsvg-cairo.lib" `
          -DREGEX_DIR="$REGEX_DIR" `
          -DSWIG_EXECUTABLE="$SWIG_EXECUTABLE" `
          -DPROTOBUFC_COMPILER="$SDK_BIN/protoc.exe" `
          -DPROTOBUFC_LIBRARY="$SDK_LIB/protobuf-c.lib" `
          -DPROTOBUFC_INCLUDE_DIR="$SDK_INC/protobuf-c" `
          -DWITH_CURL=1 `
          -DWITH_KML=1 `
          -DWITH_SVGCAIRO=1 `
          -DWITH_THREAD_SAFETY=1 `
          -DWITH_SOS=1 `
          -DWITH_CLIENT_WFS=1 `
          -DWITH_CLIENT_WMS=1 `
          -DWITH_CSHARP=1 `
          -DWITH_PROTOBUFC=1 `
          -DWITH_POSTGIS=1 `
          -DWITH_PERL=0 `
          -DWITH_MSSQL2008=1 `
          -DWITH_PYTHON=1 `
          -DWITH_PHPNG=0 `
          -DWITH_HARFBUZZ=1 `
          -DPROJ_INCLUDE_DIR="$SDK_INC/proj7" `
          -DPython_ROOT_DIR="$PYTHON_ROOT_DIR" `
          -DPython_EXECUTABLE="$PYTHON_EXECUTABLE" `
          -DWITH_PYMAPSCRIPT_ANNOTATIONS=$PYMAPSCRIPT_ANNOTATIONS

          #cmake --build . --config Release
          # cannot use DEBUG here - see https://github.com/gisinternals/buildsystem/issues/195
          # can use RelWithDebInfo
          cmake --build . --config Release
          
          $env:MAPSERVER_DLL_PATH="$ROOT_FOLDER/build/Release;$SDK_BIN"
          $env:PROJ_LIB="$SDK_BIN/proj7/SHARE"

          cmake --build . --target pythonmapscript-wheel --config Release

          # make sdist for one version of Python as they are identical
          if ("${{ matrix.python-version }}" -eq "3.10")
          {
            cd "$ROOT_FOLDER/build/mapscript/python/Release"
            $params = "setup.py", "sdist"
            & $PYTHON_EXECUTABLE $params
            cd $ROOT_FOLDER
          }

      - name: Configure MapServer
        if: ${{ false }} # disable command prompt for now
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"

          # following lines for local testing
          #call "C:\Program Files\Microsoft Visual Studio\2022\Professional\VC\Auxiliary\Build\vcvars64.bat"
          #cd /D D:\MapServer\VS2022
          #set VS_VER="Visual Studio 17 2022"
          #set PATH=D:/Tools/cmake-3.22.3-windows-x86_64/bin;%PATH%
          #set PYTHON_ROOT_DIR=C:/Python310
          #set SDK=release-1930-x64
          #set SWIG_VER=4.1.0

          # as above for GHA
          set SDK=${{ env.SDK }}
          set VS_VER="${{ env.VS_VER }}"
          set PYTHON_ROOT_DIR=${{ env.pythonLocation }}
          set SWIG_VER=${{ env.SWIG_VER }}

          # following commands for both local and GHA
          set PYTHON_ROOT_DIR=%PYTHON_ROOT_DIR:\=/%
          set ROOT_FOLDER=%cd:\=/%
          set SDK_PREFIX=%ROOT_FOLDER%/sdk/%SDK%
          set SDK_INC=%SDK_PREFIX%/include
          set SDK_LIB=%SDK_PREFIX%/lib
          set SDK_BIN=%SDK_PREFIX%/bin
          set SWIG_EXECUTABLE=%ROOT_FOLDER%/sdk/swigwin-%SWIG_VER%/swig.exe
          set REGEX_DIR=%ROOT_FOLDER%/sdk/support/regex-0.12
          set PYTHON_EXECUTABLE=%PYTHON_ROOT_DIR%/python.exe
          mkdir build
          cd build
          set PATH=%ROOT_FOLDER%/build/Release;%SDK_BIN%;%PATH%;
          set PROJECT_BINARY_DIR=%ROOT_FOLDER%/build
          set SWIG_PYTHON_INTERPRETER_NO_DEBUG=1

          set PYMAPSCRIPT_ANNOTATIONS=1
          if "${{ matrix.python-version }}" EQU "2.7" (
            set PYMAPSCRIPT_ANNOTATIONS=0
          )

          cmake -G %VS_VER% -A "x64" %ROOT_FOLDER%/mapserver -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%SDK_PREFIX% ^
          -DPNG_LIBRARY=%SDK_LIB%/libpng16_static.lib -DHARFBUZZ_INCLUDE_DIR=%SDK_INC%/harfbuzz -DICONV_DLL=%SDK_BIN%/iconv.dll ^
          -DFRIBIDI_INCLUDE_DIR=%SDK_INC%/fribidi -DMS_EXTERNAL_LIBS=%SDK_LIB%/harfbuzz.lib;%SDK_LIB%/uriparser.lib -DSVG_LIBRARY=%SDK_LIB%/libsvg.lib ^
          -DSVGCAIRO_LIBRARY=%SDK_LIB%/libsvg-cairo.lib -DREGEX_DIR=%REGEX_DIR% -DSWIG_EXECUTABLE=%SWIG_EXECUTABLE% ^
          -DPROTOBUFC_COMPILER=%SDK_BIN%/protoc.exe -DPROTOBUFC_LIBRARY=%SDK_LIB%/protobuf-c.lib -DPROTOBUFC_INCLUDE_DIR=%SDK_INC%/protobuf-c ^
          -DWITH_CURL=1 -DWITH_KML=1 -DWITH_SVGCAIRO=1 -DWITH_THREAD_SAFETY=1 -DWITH_SOS=1 -DWITH_CLIENT_WFS=1 ^
          -DWITH_CLIENT_WMS=1-DWITH_CSHARP=1 -DWITH_PROTOBUFC=1 -DWITH_POSTGIS=1 -DWITH_PERL=0 -DWITH_MSSQL2008=1 -DWITH_PYTHON=1 ^
          -DWITH_PHPNG=0 -DWITH_HARFBUZZ=1 -DPROJ_INCLUDE_DIR=%SDK_INC%/proj7 -DPython_ROOT_DIR=%PYTHON_ROOT_DIR% ^
          -DPython_EXECUTABLE=%PYTHON_EXECUTABLE% -DWITH_PYMAPSCRIPT_ANNOTATIONS=%PYMAPSCRIPT_ANNOTATIONS%

          #cmake --build . --config Release
          # cannot use DEBUG here - see https://github.com/gisinternals/buildsystem/issues/195
          # can use RelWithDebInfo
          cmake --build . --config Release
          
          set MAPSERVER_DLL_PATH=%ROOT_FOLDER%/build/Release;%SDK_BIN%
          set PROJ_LIB=%SDK_BIN%/proj7/SHARE
          
          #set MAPSCRIPT_FLD=%ROOT_FOLDER%/build/mapscript/python/Release/mapscriptvenv/Lib/site-packages/mapscript
          #if "${{ matrix.python-version }}" NEQ "3.10" (
          #  copy %SDK_BIN%/sqlite3.dll %MAPSCRIPT_FLD%
          #)
          cmake --build . --target pythonmapscript-wheel --config Release

          REM make sdist for one version of Python as they are identical
          if "${{ matrix.python-version }}" EQU "3.10" (
            cd %ROOT_FOLDER%/build/mapscript/python/Release
            %PYTHON_EXECUTABLE% setup.py sdist
            cd %ROOT_FOLDER%
          )

      - name: Add Wheels and source files to repo
        #if: always() # always upload any files for debugging
        # only check-in the wheels if the keyword upload-wheels is present in the commit message
        if: contains(github.event.head_commit.message, 'upload-wheels')
        shell: powershell
        run: |
          $root=(Get-Item .).FullName
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          cd wheels
          $fld="$root/build/mapscript/python/release/dist"
          if (Test-Path -Path $fld) {
            cp -r "$fld/*" .
          }
          git add .
          git commit -m "Add wheels"
          
          cd "$root/src/${{ matrix.python-version }}"
          $fld="$root/build/mapscript/python/CMakeFiles/_pythonmapscript.dir"
          if (Test-Path -Path $fld) {
            cp -r "$fld/*" .
          }

          $pyfile="$root/build/mapscript/python/mapscript.py"
          if (Test-Path -Path $pyfile) {
            cp "$pyfile" .
          }

          git add .
          git commit -m "Add source files"
          git pull
          git push --force

#  publish:
#    name: Publish to PyPI
#    needs: test
#    runs-on: ubuntu-latest
#    container: python:3-slim
#    steps:
#      - name: Publish package
#        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_API_TOKEN }}

# https://stackoverflow.com/questions/65300378/how-can-i-download-the-build-file-from-github-actions