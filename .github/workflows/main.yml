name: Build Python MapScript Wheels

on: [push]
env:
  # SDK: release-1928-x64
  # VS_VER: "Visual Studio 16 2019"
  SDK: release-1930-x64
  VS_VER: "Visual Studio 17 2022"

jobs:
  build:

    runs-on: windows-2022 # includes VS 2022
    #runs-on: windows-2019 # includes VS 2019
    strategy:
      matrix:
        python-version: [2.7, 3.6, 3.7, 3.8, 3.9, 3.10]

    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get MapServer sourcecode
        shell: powershell
        run: |
          git clone https://github.com/mapserver/mapserver.git --branch main --single-branch .
          
      - name: Download and unzip SDK
        shell: powershell
        # http://download.gisinternals.com/sdk/downloads/release-1930-x64-dev.zip
        run: |
          $SDK="${{ env.SDK }}"
          # $SDK="release-1928-x64"
          $SDK_ZIP="$SDK-dev.zip"
          $SDK_URL="http://download.gisinternals.com/sdk/downloads/$SDK_ZIP"
          $ProgressPreference = 'SilentlyContinue' # remove console output and greatly speeds-up downloading and unzipping
          Invoke-WebRequest -Uri $SDK_URL -OutFile $SDK_ZIP
          Expand-Archive $SDK_ZIP -DestinationPath sdk
          #nuget install swigwintools -Version 4.0.0 -OutputDirectory sdk/swig
          $SWIG_ZIP="swigwin-4.0.2.zip"
          #Remove-Item -Path "sdk/swig.exe"
          Invoke-WebRequest -Uri "https://github.com/geographika/python-mapscript/raw/main/$SWIG_ZIP" -OutFile $SWIG_ZIP
          Expand-Archive $SWIG_ZIP -DestinationPath "sdk"

      - name: Configure MapServer
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          
          REM call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          REM call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\VC\Auxiliary\Build\vcvars64.bat"
          REM cd /D D:\Temp\MS2
          REM set VS_VER="Visual Studio 17 2022"
          REM set PATH=D:/Tools/cmake-3.22.3-windows-x86_64/bin;%PATH%
          REM set PYTHON_ROOT_DIR=C:/Python38
          REM set SDK=release-1928-x64
          REM set VS_VER="Visual Studio 16 2019"
          set SDK=${{ env.SDK }}
          set VS_VER="${{ env.VS_VER }}"
          set ROOT_FOLDER=%cd:\=/%
          set SDK_PREFIX=%ROOT_FOLDER%/sdk/%SDK%
          set SDK_INC=%SDK_PREFIX%/include
          set SDK_LIB=%SDK_PREFIX%/lib
          set SDK_BIN=%SDK_PREFIX%/bin
          set SWIG_EXECUTABLE=%ROOT_FOLDER%/sdk/swigwin-4.0.2/swig.exe
          set REGEX_DIR=%ROOT_FOLDER%/sdk/support/regex-0.12
          set PYTHON_ROOT_DIR=${{ env.pythonLocation }}
          set PYTHON_EXECUTABLE=%PYTHON_ROOT_DIR%/python.exe
          mkdir build
          cd build
          set PATH=%ROOT_FOLDER%/build/Release;%SDK_BIN%;%PATH%;
          set PROJECT_BINARY_DIR=%ROOT_FOLDER%/build
          set SWIG_PYTHON_INTERPRETER_NO_DEBUG=1
          cmake -G %VS_VER% -A "x64" .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=%SDK_PREFIX% -DPNG_LIBRARY=%SDK_LIB%/libpng16_static.lib -DHARFBUZZ_INCLUDE_DIR=%SDK_INC%/harfbuzz -DICONV_DLL=%SDK_BIN%/iconv.dll -DFRIBIDI_INCLUDE_DIR=%SDK_INC%/fribidi -DMS_EXTERNAL_LIBS=%SDK_LIB%/harfbuzz.lib;%SDK_LIB%/uriparser.lib -DSVG_LIBRARY=%SDK_LIB%/libsvg.lib -DSVGCAIRO_LIBRARY=%SDK_LIB%/libsvg-cairo.lib -DREGEX_DIR=%REGEX_DIR% -DSWIG_EXECUTABLE=%SWIG_EXECUTABLE% -DPROTOBUFC_COMPILER=%SDK_BIN%/protoc.exe -DPROTOBUFC_LIBRARY=%SDK_LIB%/protobuf-c.lib -DPROTOBUFC_INCLUDE_DIR=%SDK_INC%/protobuf-c -DWITH_CURL=1 -DWITH_KML=1 -DWITH_SVGCAIRO=1 -DWITH_THREAD_SAFETY=1 -DWITH_SOS=1 -DWITH_CLIENT_WFS=1 -DWITH_CLIENT_WMS=1-DWITH_CSHARP=1 -DWITH_PROTOBUFC=1 -DWITH_POSTGIS=0 -DWITH_PERL=0 -DWITH_MSSQL2008=1 -DWITH_PYTHON=1 -DWITH_PHPNG=0 -DWITH_HARFBUZZ=1 -DPROJ_INCLUDE_DIR=%SDK_INC%/proj7
          cmake --build . --config Release
          set MAPSERVER_DLL_PATH=%ROOT_FOLDER%/build/Release;%SDK_BIN%
          set PROJ_LIB=%SDK_BIN%/proj7/SHARE
          copy %SDK_BIN%\sqlite3.dll %ROOT_FOLDER%/build/mapscript/python/Release/mapscriptvenv/Lib/site-packages/mapscript
          cmake --build . --target pythonmapscript-wheel --config Release

      - name: Add Wheel to repo
        run: |
          git clone https://github.com/geographika/python-mapscript.git --branch main --single-branch main
          cd main/wheels
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          cp -r build/mapscript/python/release/dist/* .
          git add .
          git commit -m "Add wheels" -a
          git push https://github.com/geographika/python-mapscript.git

#  publish:
#    name: Publish to PyPI
#    needs: test
#    runs-on: ubuntu-latest
#    container: python:3-slim
#    steps:
#      - name: Publish package
#        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_API_TOKEN }}

# https://stackoverflow.com/questions/65300378/how-can-i-download-the-build-file-from-github-actions